/*

This is a password checker that checks for the strength of the password to be created.

Challenge source: http://www.codenewbie.org/blogs/password-checker

*/

#include <iostream>
#include <string>
#include <vector>

int main(void)
{
    std::vector<std::string> commonWords;

    commonWords.push_back("the");
    commonWords.push_back("be");
    commonWords.push_back("to");
    commonWords.push_back("of");
    commonWords.push_back("and");
    commonWords.push_back("a");
    commonWords.push_back("in");
    commonWords.push_back("that");
    commonWords.push_back("have");
    commonWords.push_back("I");
    commonWords.push_back("it");
    commonWords.push_back("for");
    commonWords.push_back("not");
    commonWords.push_back("on");
    commonWords.push_back("with");
    commonWords.push_back("he");
    commonWords.push_back("as");
    commonWords.push_back("you");
    commonWords.push_back("do");
    commonWords.push_back("at");
    commonWords.push_back("this");
    commonWords.push_back("but");
    commonWords.push_back("his");
    commonWords.push_back("by");
    commonWords.push_back("from");
    commonWords.push_back("they");
    commonWords.push_back("we");
    commonWords.push_back("say");
    commonWords.push_back("her");
    commonWords.push_back("she");
    commonWords.push_back("or");
    commonWords.push_back("an");
    commonWords.push_back("will");
    commonWords.push_back("my");
    commonWords.push_back("one");
    commonWords.push_back("all");
    commonWords.push_back("would");
    commonWords.push_back("there");
    commonWords.push_back("their");
    commonWords.push_back("what");

    std::string password;

    while (1)
    {
        int requirementCount = 0;
        password.clear();
        std::getline(std::cin, password);

        if ( password.size() <  10 )
        {
            std::cout << "Password's length is too short! Make it 10+ characters!\n";
        }
        else
        {
            //Checking for both uppercase and lowercase appearances
            int letterCount = 0, numberCount = 0, symbolCount = 0;
            for(int i = 0; i < password.size(); i++)
            {
                if (password[i] >= 'A' && password[i] <= 'Z')
                {
                    letterCount++;
                }
                if (password[i] >= 'a' && password[i] <= 'z')
                {
                    letterCount++;
                }

                //Checking for numbers
                if ( password[i] >= '0' && password[i] <= '9')
                {
                    numberCount++;
                }

                //Checking for symbols
                if ( (password[i] >= 33 && password[i] <= 47) || (password[i] >= 58 && password[i] <= 64) || (password[i] >= 123 && password[i] <= 126))
                {
                    symbolCount++;
                }
            }

            if ( letterCount >= 2 )
            {
                requirementCount++;
            }
            if ( numberCount >= 1 )
            {
                requirementCount++;
            }
            if (symbolCount >= 1 )
            {
                requirementCount++;
            }

            //Checking for common words
            bool foundCommonWords = false;
            if ( requirementCount >= 2 )
            {
                for(int i = 0; i < commonWords.size(); i++)
                {
                    if (password.find(commonWords.at(i)) != std::string::npos)
                    {
                        std::cout << "Contain Common Words!\n";
                        foundCommonWords = true;
                        break;
                    }
                }

                if ( foundCommonWords == false )
                {
                   std::cout << "Good password!\n";
                }
            }
            else
            {
                std::cout << "Need to meet at least two requirements!\n";
            }
        }
    }
}
